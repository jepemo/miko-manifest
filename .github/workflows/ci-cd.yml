name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  MIKO_SHELL_VERSION: latest
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Install miko-shell
        run: |
          curl -sSL https://raw.githubusercontent.com/jepemo/miko-shell/main/install.sh | bash
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Verify miko-shell installation
        run: |
          miko-shell version
          miko-shell run help

      - name: Build development container
        run: |
          # This builds the development environment container for running tests
          miko-shell image build

      - name: Run tests
        run: |
          miko-shell run test

      - name: Run tests with coverage
        run: |
          miko-shell run test-coverage

      - name: Upload coverage to Codecov
        if: github.event_name == 'push'
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Install miko-shell
        run: |
          curl -sSL https://raw.githubusercontent.com/jepemo/miko-shell/main/install.sh | bash
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Build development container
        run: |
          # This builds the development environment container for running tests/lint
          miko-shell image build

      - name: Run linting
        run: |
          miko-shell run lint

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Install miko-shell
        run: |
          curl -sSL https://raw.githubusercontent.com/jepemo/miko-shell/main/install.sh | bash
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Build development container
        run: |
          # This builds the development environment container for running builds
          miko-shell image build

      - name: Build binary
        run: |
          miko-shell run build

      - name: Verify binary
        run: |
          if [ -f miko-manifest ]; then
            echo "✅ Binary built successfully"
            ls -la miko-manifest
            file miko-manifest
          else
            echo "❌ Binary not found"
            exit 1
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: miko-manifest-${{ github.sha }}
          path: miko-manifest

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Install miko-shell
        run: |
          curl -sSL https://raw.githubusercontent.com/jepemo/miko-shell/main/install.sh | bash
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Build development container
        run: |
          # This builds the development environment container for building releases
          miko-shell image build

      - name: Build release binaries
        run: |
          # Build for different architectures with VCS disabled
          GOOS=linux GOARCH=amd64 miko-shell run -- env GOFLAGS="-buildvcs=false" go build -ldflags="-X github.com/jepemo/miko-manifest/cmd.version=${{ github.ref_name }}" -o miko-manifest-linux-amd64 .
          GOOS=linux GOARCH=arm64 miko-shell run -- env GOFLAGS="-buildvcs=false" go build -ldflags="-X github.com/jepemo/miko-manifest/cmd.version=${{ github.ref_name }}" -o miko-manifest-linux-arm64 .
          GOOS=darwin GOARCH=amd64 miko-shell run -- env GOFLAGS="-buildvcs=false" go build -ldflags="-X github.com/jepemo/miko-manifest/cmd.version=${{ github.ref_name }}" -o miko-manifest-darwin-amd64 .
          GOOS=darwin GOARCH=arm64 miko-shell run -- env GOFLAGS="-buildvcs=false" go build -ldflags="-X github.com/jepemo/miko-manifest/cmd.version=${{ github.ref_name }}" -o miko-manifest-darwin-arm64 .
          GOOS=windows GOARCH=amd64 miko-shell run -- env GOFLAGS="-buildvcs=false" go build -ldflags="-X github.com/jepemo/miko-manifest/cmd.version=${{ github.ref_name }}" -o miko-manifest-windows-amd64.exe .

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            miko-manifest-linux-amd64
            miko-manifest-linux-arm64
            miko-manifest-darwin-amd64
            miko-manifest-darwin-arm64
            miko-manifest-windows-amd64.exe
          generate_release_notes: true
