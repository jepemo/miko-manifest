package cmd

import (
	"fmt"
	"os"

	"github.com/jepemo/miko-manifest/pkg/mikomanifest"
	"github.com/jepemo/miko-manifest/pkg/output"
	"github.com/spf13/cobra"
)

var validateDir string
var validateEnvironment string
var validateConfigDir string
var validateSkipSchemaValidation bool
var validateVerbose bool

var validateCmd = &cobra.Command{
	Use:   "validate",
	Short: "Validate generated Kubernetes manifests",
	Long: `Validate generated Kubernetes manifest YAML files in the specified directory.

This command validates the output manifests (generated by 'build') to ensure they are:
  - Valid YAML syntax
  - Compliant with Kubernetes resource schemas
  - Deployable to a Kubernetes cluster
  - Compatible with custom resource definitions (if schemas provided)

Typical workflow:
  1. miko-manifest check                         # Validate configuration
  2. miko-manifest build --env <environment>     # Generate manifests
  3. miko-manifest validate --dir <output-dir>   # Validate generated manifests

Related commands:
  - Use 'check' to validate configuration files before generation
  - Use 'config' to inspect configuration values and schemas`,
	Run: func(cmd *cobra.Command, args []string) {
		// Create output options
		outputOpts := &output.OutputOptions{Verbose: validateVerbose}
		
		// If no directory specified but environment is provided, try to detect from environment info
		if validateDir == "" && validateEnvironment != "" {
			return
		}
		
		// If directory is provided as positional argument
		if len(args) > 0 && validateDir == "" {
			validateDir = args[0]
		}
		
		if validateDir == "" {
			outputOpts.PrintError("Input validation", "directory is required (use --dir or provide as argument)")
			os.Exit(1)
		}
		
		options := mikomanifest.LintOptions{
			Directory:            validateDir,
			Environment:          validateEnvironment,
			ConfigDir:            validateConfigDir,
			SkipSchemaValidation: validateSkipSchemaValidation,
			OutputOpts:           outputOpts,
		}
		
		if err := mikomanifest.LintDirectory(options); err != nil {
			outputOpts.PrintError("Directory validation", fmt.Sprintf("Error validating directory: %v", err))
			os.Exit(1)
		}
	},
}

func init() {
	validateCmd.Flags().StringVarP(&validateDir, "dir", "d", "", "Directory to validate for YAML files")
	validateCmd.Flags().StringVarP(&validateEnvironment, "env", "e", "", "Environment configuration to use for schema loading")
	validateCmd.Flags().StringVarP(&validateConfigDir, "config", "c", "config", "Configuration directory path (used with --env)")
	validateCmd.Flags().BoolVar(&validateSkipSchemaValidation, "skip-schema-validation", false, "Skip custom resource schema validation")
	validateCmd.Flags().BoolVar(&validateVerbose, "verbose", false, "Show detailed validation information")
}
