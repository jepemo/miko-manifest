name: miko-manifest

container:
  provider: docker
  image: golang:1.24-alpine
  setup:
    - apk add --no-cache make git curl bash
    - go install honnef.co/go/tools/cmd/staticcheck@latest
    - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

shell:
  startup:
    - echo "🚀 Welcome to miko-manifest development environment"
    - 'echo "📦 Project: $(basename $PWD)"'
    - 'echo "🐹 Go version: $(go version)"'

  scripts:
    - name: test
      description: Run all tests
      commands:
        - go test -v ./...

    - name: test-coverage
      description: Run tests with coverage report
      commands:
        - go test -v -coverprofile=coverage.out ./...
        - go tool cover -html=coverage.out -o coverage.html
        - 'echo "📊 Coverage report generated: coverage.html"'

    - name: test-race
      description: Run tests with race detector
      commands:
        - go test -v -race ./...

    - name: test-lib
      description: Run library tests only
      commands:
        - go test -v ./pkg/mikomanifest/...

    - name: clean-all
      description: Clean all artifacts and directories
      commands:
        - go clean
        - rm -f miko-manifest
        - rm -rf config templates output
        - 'echo "🧹 Cleaned: binary, config/, templates/, and output/ directories"'

    - name: build
      description: Build the binary
      commands:
        - 'GOFLAGS="-buildvcs=false" GOOS=$MIKO_HOST_OS GOARCH=$MIKO_HOST_ARCH go build -ldflags="-X github.com/jepemo/miko-manifest/cmd.version=dev" -o miko-manifest .'
        - 'echo "✅ Build completed: miko-manifest"'

    - name: clean
      description: Clean build artifacts
      commands:
        - go clean
        - rm -f miko-manifest
        - 'echo "🧹 Cleaned build artifacts"'

    - name: deps
      description: Download and tidy dependencies
      commands:
        - go mod tidy
        - go mod download
        - 'echo "📦 Dependencies updated"'

    - name: fmt
      description: Format code
      commands:
        - go fmt ./...
        - 'echo "📝 Code formatted"'

    - name: lint
      description: Run linter
      commands:
        - GOFLAGS="-buildvcs=false" golangci-lint run
        - 'echo "✅ Linting completed"'

    - name: precommit
      description: Run all pre-commit checks
      commands:
        - 'echo "🔍 Running pre-commit checks..."'
        - GOFLAGS="-buildvcs=false" go vet ./...
        - go fmt ./...
        - gofmt -w .
        - GOFLAGS="-buildvcs=false" staticcheck ./...
        - GOFLAGS="-buildvcs=false" go test -cover ./...
        - 'echo "✅ All pre-commit checks passed!"'

    - name: help
      description: Show available scripts
      commands:
        - 'echo "📋 Available miko-shell scripts:"'
        - 'echo "  test         - Run all tests"'
        - 'echo "  test-coverage - Run tests with coverage"'
        - 'echo "  test-race    - Run tests with race detector"'
        - 'echo "  test-lib     - Run library tests only"'
        - 'echo "  build        - Build the binary"'
        - 'echo "  clean        - Clean build artifacts"'
        - 'echo "  clean-all    - Clean all artifacts and directories"'
        - 'echo "  deps         - Download dependencies"'
        - 'echo "  fmt          - Format code"'
        - 'echo "  lint         - Run linter"'
        - 'echo "  precommit    - Run pre-commit checks"'
